<pre>
Pero, si queremos que coincida con una expresión regular en el comienzo de una cadena y sólo al principio?
El módulo re de Python proporciona dos funciones para que coincida con las expresiones regulares. Nos hemos encontrado ya uno de ellos,
es decir, la search(). El otro tiene en nuestra opinión un nombre engañoso: match()
Fraudulenta, porque match(re_str, s) comprueba si re_str simplemente en el principio de la cadena.
Pero de todos modos, match() es la solución a nuestra pregunta, como podemos ver en el siguiente ejemplo:

[rrc@Pridd ~]$ python3
Python 3.4.3 (default, Jul  1 2015, 18:38:11) 
[GCC 4.9.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import re
>>> Str1 = "Paco es un nombre muy común"
>>> Str2 = "Se llamo Paco pero no está Mexicano"
>>> print( re.search( r"P..o", Str1 ) )
<_sre.SRE_Match object; span=(0, 4), match='Paco'>
>>> 
>>> print( re.search( r"P..o", Str2 ) )
<_sre.SRE_Match object; span=(9, 13), match='Paco'>
>>> print( re.match( r"P..o", Str1 ) )
<_sre.SRE_Match object; span=(0, 4), match='Paco'>
>>> print( re.match( r"P..o", Str2 ) )
None

So, this is a way to match the start of a string, but it's a Python specific method, i.e. it can't be used in other languages like Perl, AWK and so on. There is a general solution which is a standard for regular expressions:

The caret '^' Matches the start of the string, and in MULTILINE (will be explained further down) mode also matches immediately after each newline, which the Python method match() doesn't do.
The caret has to be the first character of a regular expression:

>>> print( re.search( r"^P..o", Str1 ) )
<_sre.SRE_Match object; span=(0, 4), match='Paco'>
>>> print( re.search( r"^P..o", Str2 ) )
None

But what happens if we concatenate the two strings s1 and s2 in the following way:

Str3 = Str2 + "\n" + Str1

Now the string doesn't start with a Maier of any kind, but the name is following a newline character:

>>> Str3 = Str2 + "\n" + Str1
>>> print( re.search( r"^P..o", Str3 ) )
None

The name hasn't been found, because only the beginning of the string is checked. It changes, if we use 
the multiline mode, which can be activated by adding the following third parameters to search:

>>> print( re.search( r"^P..o", Str3, re.MULTILINE ) )
<_sre.SRE_Match object; span=(36, 40), match='Paco'>
>>> print( re.search( r"^P..o", Str3, re.M ) )
<_sre.SRE_Match object; span=(36, 40), match='Paco'>
>>> print( re.match( r"^P..o", Str3, re.M ) )
None
>>> 

The previous example also shows that the multiline mode doesn't affect the match method. match() never 
checks anything but the beginning of the string for a match.
</pre>
