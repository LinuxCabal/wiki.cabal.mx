__NOTOC__
* [[:#JOINs | JOINs]]

= JOINs =

<syntaxhighlight lang="sql" line="GESHI_FANCY_LINE_NUMBERS">

JOINs son manera para consultar datos de dos o más tablas.

CREATE TABLE `Usuarios` (
	`ID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
	`Nombre` varchar(30) NOT NULL,
	`Curso` smallint(5) unsigned DEFAULT NULL,
	PRIMARY KEY (`ID`)
);

The course number relates to a subject being taken in a course table…

CREATE TABLE `CURSOS` (
	`ID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
	`Nombre` varchar(50) NOT NULL,
	PRIMARY KEY (`ID`)
);

JOINs allow us to query this data in a number of ways.

INNER JOIN (or just JOIN)

The most frequently used clause is INNER JOIN. This produces 
a set of records which match in both the user and course tables, 
i.e. all users who are enrolled on a course:


SELECT Usuarios.Nombre, Curso.Nombre
FROM `Usuarios`
INNER JOIN `Curso` on Usuarios.Curso.course = Cursos.ID;


What if we require a list of all students and their courses even if they’re not enrolled on one? A LEFT JOIN produces a set of records which matches every entry in the left table (Usuarios) regardless of any matching entry in the right table (Cursos):


SELECT Usuarios.Nombre, Cursos.Nombre
FROM `Usuarios`
LEFT JOIN `Cursos` on Usuarios.Curso = Cursos.ID;

RIGHT JOIN

Perhaps we require a list all courses and students even 
if no one has been enrolled? A RIGHT JOIN produces a set 
of records which matches every entry in the right table (Cursos) regardless of any matching entry in the left table (Usuarios):


SELECT Usuarios.Nombre, Cursos.Nombre
FROM `Usuarios`
RIGHT JOIN `Cursos` on Usuarios.Curso = Cursos.ID;


RIGHT JOINs are rarely used since you can express the same result using a LEFT JOIN. This can be more efficient and quicker for the database to parse:


SELECT Usuarios.Nombre, Cursos.Nombre
FROM `Cursos`
LEFT JOIN `Usuarios` on Usuarios.Curso = Curso-ID;

We could, for example, count the number of students enrolled on each course:


SELECT Cursos.Nombre, COUNT(Usuarios.Nombre)
FROM `Cursos`
LEFT JOIN `Usuarios` ON Usuarios.Curso = Cursos.ID
GROUP BY Cursos.ID;

OUTER JOIN (or FULL OUTER JOIN)

Our last option is the OUTER JOIN which returns all records in both tables regardless of any match. Where no match exists, the missing side will contain NULL.

OUTER JOIN is less useful than INNER, LEFT or RIGHT and it’s not implemented in MySQL. However, you can work around this restriction using the UNION of a LEFT and RIGHT JOIN, e.g.


SELECT Usuarios.Nombre, Cursos.Nombre
FROM `Usuarios`
LEFT JOIN `Cursos` on Usuarios.Cursos = Curso.ID

UNION

SELECT Usuarios.Nombre, Cusros.Nombre
FROM `Usuarios`
RIGHT JOIN `Cursos` on Usuarios.Curso = Cursos.ID;

</syntaxhighlight>

[[Category:MariaDB Desde la Consola]]
[[Category: CursoMatiaDB]]
